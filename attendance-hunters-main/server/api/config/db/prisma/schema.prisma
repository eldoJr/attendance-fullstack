

generator client {
  provider = "prisma-client-js"
  output   = "../../../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique
  password   String
  name       String
  employeeId String?      @unique
  role       String       @default("employee")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  attendance Attendance[]
}

model Student {
  id             Int                 @id @default(autoincrement())
  studentId      String              @unique
  name           String
  email          String              @unique
  phone          String?
  department     String
  class          String
  section        String
  year           String
  enrollmentDate DateTime            @default(now())
  status         String              @default("Active")
  gpa            Float?              @default(0.0)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  attendance     StudentAttendance[]
}

model Department {
  id          Int       @id @default(autoincrement())
  name        String
  code        String    @unique
  head        String
  email       String
  phone       String
  type        String    // "Technology", "Engineering", "Science"
  programs    Int       @default(0)
  faculty     Int       @default(0)
  students    Int       @default(0)
  status      String    @default("Active")
  description String?
  location    String?
  budget      Float?    @default(0.0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  faculties   Faculty[]
}

model Faculty {
  id           Int        @id @default(autoincrement())
  employeeId   String     @unique
  name         String
  email        String     @unique
  phone        String?
  department   String
  departmentId Int
  position     String     // "Professor", "Associate Professor", "Assistant Professor"
  qualification String?
  experience   Int?       @default(0)
  salary       Float?     @default(0.0)
  status       String     @default("Active")
  joinDate     DateTime   @default(now())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  dept         Department @relation(fields: [departmentId], references: [id])
}

model StudentAttendance {
  id        Int      @id @default(autoincrement())
  studentId Int
  classId   String
  date      DateTime @default(now())
  status    String   // "present", "absent", "late"
  timestamp String?
  student   Student  @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
}

model Attendance {
  id         Int      @id @default(autoincrement())
  employeeId String
  type       String   // "check-in" or "check-out"
  timestamp  DateTime @default(now())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
}
